{
  "name": "mongo-watch",
  "description": "A mongo watcher.  This ties into the MongoDB replication oplog, and exposes all data modifications via an EventEmitter.",
  "version": "0.2.1",
  "homepage": "http://github.com/TorchlightSoftware/mongo-watcher",
  "repository": {
    "type": "git",
    "url": "git://github.com/TorchlightSoftware/mongo-watcher.git"
  },
  "author": {
    "name": "Torchlight Software",
    "email": "info@torchlightsoftware.com",
    "url": "http://torchlightsoftware.com"
  },
  "main": "./index.js",
  "dependencies": {
    "coffee-script": "*",
    "mongodb": "*",
    "async": "*"
  },
  "devDependencies": {
    "mocha": "*",
    "lodash": "*",
    "should": "*"
  },
  "engines": {
    "node": ">= 0.8.4"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/torchlightsoftware/mongo-watcher/raw/master/LICENSE"
    }
  ],
  "scripts": {
    "test": "mocha"
  },
  "readme": "# Mongo Watch\n\nThis watcher ties into the MongoDB replication log (local.oplog.rs) and notifies your watchers any time the data changes.\n\nIn order to use this you must:\n\n1. Have access to the oplog.  This will not be available on shared DB hosting, as it would reveal everyone else's database transactions to you.\n2. Have replication enabled.  This can be done by starting mongod with the option '--replSet someArbitraryName'.  You must then call `rs.initiate()` from the mongo CLI.\n\nThe watcher is fairly low latency and overhead.  On my machine a test with a single insert and watcher takes 20ms.  The cursor used to tail the oplog is being initialized with {awaitdata: true} so the data should be getting pushed from MongoDB's internal mechanism, instead of polling.\n\nBecause the watcher ties in to the oplog, this solution should scale with you as you add more MongoDB nodes, and allow any corresponding application instances to be notified of the same state changes.  I have not yet set up a cluster to test this, so I would welcome any comments or feedback you might have.\n\nHappy event driven programming!  8-)\n\n**Note:** The query functionality previously supported in 0.1.12 is now deprecated.  This code will be moved to [Particle](https://github.com/torchlightsoftware/particle).  Sorry for any inconvenience, but I determined this would be a much cleaner place to separate the APIs and respective responsibilities of the libraries.\n\n## Install\n\n```bash\nnpm install mongo-watch\n```\n\n## Usage\n\nWatching a collection is as easy as:\n\n```coffee-script\nMongoWatch = require 'mongo-watch'\n\nwatcher = new MongoWatch {format: 'pretty'}\n\n# watch the collection\nwatcher.watch 'test.users', (event) ->\n\n  # parse the results\n  console.log 'something changed:', event\n```\n\nNow when you run an insert you should see the event get logged by the code above.\n\n```coffee-script\n# create db client for a test transaction\n{Server, Db} = require 'mongodb'\nclient = new Db 'test', new Server('localhost', 27017), {w: 1}\nclient.open ->\n  client.collection 'users', (err, users) ->\n\n    # fire off an update that will trigger the watcher\n    users.insert {email: 'graham@daventry.com'}, ->\n```\n\n## Options\n\nSee the applyDefaults function in [lib/main.coffee](https://github.com/TorchlightSoftware/mongo-watch/blob/master/lib/main.coffee) for a list of options and their defaults.\n\nSee the tests for more examples.\n\n## Debugging\n\nIf you pass the onDebug option with a function of your choice, it will be notified of major events in the listener lifecycle.  This is useful for troubleshooting if you're not receiving the notifications you expect.\n\n```coffee\nwatcher = new MongoWatch {onDebug: console.log}\n```\n\nFor reference, here is output taken from the test 'Mongo Watch - insert should emit an event'.  You should expect an output similar to this, and if it's breaking down you should be able to see why from the last event that was fired.  Are you listening to the right collection?\n\n```bash\nReady: false\nEmiting 'connected'. Stream exists: true\nAdding emitter for: { collection: 'test.users' }\nAdding listener on: { collection: 'test.users' }\nData changed: { data:\n   { ts: { _bsontype: 'Timestamp', low_: 1, high_: 1362553757 },\n     h: { _bsontype: 'Long', low_: -1091839621, high_: 386723518 },\n     op: 'i',\n     ns: 'test.users',\n     o: { email: 'graham@daventry.com', _id: 5136eb9d19bd55597e000001 } },\n  watching: 'test.users',\n  relevant: true }\nEmitting event: { channel: 'change:test.users',\n  event:\n   { ts: { _bsontype: 'Timestamp', low_: 1, high_: 1362553757 },\n     h: { _bsontype: 'Long', low_: -1091839621, high_: 386723518 },\n     op: 'i',\n     ns: 'test.users',\n     o: { email: 'graham@daventry.com', _id: 5136eb9d19bd55597e000001 } } }\nRemoving listeners for: test.users\n```\n\n## Credits\n\n[Kristina Chodorow](http://www.kchodorow.com/blog/2010/10/12/replication-internals/) was very helpful both in documenting the oplog in her blog posts, and in answering some of my questions.  Christian Kvalheim's [code](https://github.com/christkv/realtime/blob/master/lib/app/dataproviders/flow_data_provider.js) served as the basis for the cursor connection.\n\n## LICENSE\n\n(MIT License)\n\nCopyright (c) 2013 Torchlight Software <info@torchlightsoftware.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/TorchlightSoftware/mongo-watcher/issues"
  },
  "_id": "mongo-watch@0.2.1",
  "dist": {
    "shasum": "102130c82d0a86008f03d0c2c2c23ad578c34cbb"
  },
  "_from": "mongo-watch@",
  "_resolved": "https://registry.npmjs.org/mongo-watch/-/mongo-watch-0.2.1.tgz"
}
